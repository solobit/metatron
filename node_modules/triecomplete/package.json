{
  "name": "triecomplete",
  "description": "An in-memory node.js autocomplete package based on the trie data structure, based off the autocomplete module",
  "keywords": [
    "autocomplete",
    "trie",
    "complete",
    "auto-complete",
    "completion",
    "search"
  ],
  "version": "0.0.1",
  "author": {
    "name": "Noah Isaacson"
  },
  "main": "index",
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.9.0",
    "eyespect": "~0.1.8",
    "should": "~1.2.2",
    "moment": "~2.0.0"
  },
  "readmeFilename": "README.md",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nisaacson/triecomplete.git"
  },
  "license": "BSD",
  "readme": "# Node Autocomplete\n\n [Node Autocomplete](https://www.github.com/marccampbell/node-autocomplete) is an autocomplete library for [node.js](http://nodejs.org).\n\n## Installation\n\n```bash\nnpm install -S autocomplete\n```\n\n## Features\n\n  - in memory, in process, not redis dependent\n  - internal [trie](http://en.wikipedia.org/wiki/Trie) data structure to store the strings\n  - super fast for adding, removing and lookups\n  - performance tested for string lists of 500,000 words\n  - high level of tests\n\n\n## Usage\n\n```javascript\nvar data = ['fruit', 'app', 'apple', 'banana']\n// instatiate a new autocomplete object\nvar Autocomplete = require('autocomplete')\nvar auto = new Autocomplete()\nauto.initialize(data)\n// results will be an array with 0 or more elements\nvar results = auto.search('ap')\n\n// here results will be an array of key-value pairs\nconsole.dir(results)\n```\n\n## Output\nThe output of the search is an array of objects with key and value properties. In the example above, `results` looks like\n```javascript\n[\n  {\n    key: 'app',\n    value: 'app'\n  },\n  {\n    key: 'apple',\n    value: 'apple,\n  }\n]\n```\n\nIf you are just searching for strings you can get an array of matching strings by mapping the results and returning just the key\n```javascript\nvar data = ['fruit', 'app', 'apple', 'banana']\n// instatiate a new autocomplete object\nvar Autocomplete = require('autocomplete')\nvar auto = new Autocomplete()\nauto.initialize(data)\n// results will be an array with 0 or more elements\nvar results = auto.search('ap')\n\n// here results will be an array of key-value pairs\nconsole.dir(results)\nvar stringMatches = results.map(function (result) {\n  return result.key\n})\n// stringMatches is ['app', 'apple']\nconsole.dir(stringMatches)\n```\n\n\n## Adding\nYou can add to the list of candidate elements after the autocomplete object has been initialized\n```javascript\nvar Autocomplete = require('autocomplete')\nvar auto = new Autocomplete()\nvar data = []\nauto.initialize(data)\nauto.addElement('cheeseburger')\n```\n\n## Removing\nYou can remove from the list of candidate elements after the autocomplete object has been initialized\n```javascript\nvar Autocomplete = require('autocomplete')\nvar auto = new Autocomplete()\nvar data = ['app', 'apple', 'apples']\nauto.initialize(data)\nauto.removeElement('apple')\n```\n\n## Object Elements\nYou can also add key value pairs as an array of 2 elements\n\n```javascript\nvar Autocomplete = require('autocomplete')\nvar auto = new Autocomplete()\nvar data = ['app', 'apple', ['apples', 'yummy'], 'banana' ]\nauto.initialize(data)\nvar results = app.search('ap')\n// in the results, there will be an element with the key *apples* and the value *yummy*\nconsole.dir(results)\n```\n\nIn the example above, `results` looks like\n\n```javascript\n[\n  { key: 'app', value: 'app' },\n  { key: 'apple', value: 'apple' },\n  { key: 'apples', value: 'yummy' }\n]\n```\n## Running Tests\n\nInstall development dependencies:\n\n```bash\nnpm install\n```\n\nThen:\n\n```bash\nnpm test\n```\n\nActively tested with node:\n\n  - 0.8.22\n\n## Authors\n\n  * Noah Isaacson\n  * Marc Campbell\n\nOriginal source code based on [https://github.com/marccampbell/node-autocomplete](https://github.com/marccampbell/node-autocomplete)\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Marc Campbell &lt;marc.e.campbell@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "triecomplete@0.0.1",
  "dist": {
    "shasum": "aa073b108f07c9f6924894f1821ed7cf4f75ecba"
  },
  "_from": "triecomplete@0.0.1",
  "_resolved": "https://registry.npmjs.org/triecomplete/-/triecomplete-0.0.1.tgz"
}
